#!/usr/bin/env ruby
# frozen_string_literal: true

# Or use Puppet's Ruby: #!/opt/puppetlabs/puppet/bin/ruby
#
# Call-seq: ./inventory.rb -F form_factor=Server -v

require 'inventory'
require 'mcollective'

include MCollective::RPC # rubocop:disable Style/MixinUsage

formatter = Inventory::Formatter.new

options = rpcoptions do |parser, local_options|
  parser.banner = "usage: #{File.basename(__FILE__)} [options]"
  parser.define_head 'Inventory options'

  parser.on('-a', '--add-columns=COLUMNS', 'Add COLUMNS to the displayed column list', Array) do |columns|
    formatter.columns += columns
  end

  parser.on('--columns=COLUMNS', 'Set the displayed column list to COLUMNS', Array) do |columns|
    formatter.columns = columns
  end

  parser.on('--hw', 'Display hardware information') do
    formatter.columns += %i[is_virtual cpu memory]
  end

  parser.on('--puppet', 'Display Puppet information') do
    formatter.columns += %i[puppet]
  end

  parser.on('--sw', 'Display sodtware information') do
    formatter.columns += %i[os kernel]
  end

  parser.on('--mono', 'Do not display a colored output') do
    formatter.mono = true
  end

  parser.on('-w', '--wide', 'Do not ellipsis long strings') do
    formatter.wide = true
  end

  parser.on('--[no-]count', 'Count values') do |count|
    formatter.count = count
  end

  parser.on('--[no-]stats', 'Display statistics') do |v|
    local_options[:stats] = v
  end

  parser.on('--sort-by=COLUMNS', 'Sort lines by COLUMS', Array) do |columns|
    formatter.sort_by = columns
  end
end

options[:stats] = true if options[:stats].nil?

util = rpcclient('rpcutil', options: options)
util.progress = false

util.class_filter(options[:class_filter]) if options[:class_filter]

util.inventory do |_, resp|
  formatter.nodes << Inventory::Node.new(resp)
end

puts formatter.to_s

printrpcstats if options[:stats]
