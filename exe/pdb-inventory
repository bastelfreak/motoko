#!/usr/bin/env ruby
# frozen_string_literal: true

require 'inventory'
require 'optparse'
require 'puppetdb'

def class_filter(klass)
  "certname in resources[certname] { type = 'Class' and title = '#{klass.split('::').map(&:capitalize).join('::')}' }"
end

def fact_filter(fact)
  name, value = fact.split('=')
  operator = '='

  if value =~ %r{\A/.*/\z}
    value = value[1..-2]
    operator = '~'
  end

  "certname in facts[certname] { name = '#{name}' and value #{operator} '#{value}' }"
end

filters = []

oparser = Inventory::OptionParser.new

oparser.parse do |parser, _formatter|
  parser.separator ''
  parser.separator 'Host Filters'

  parser.on('-C', '--wc', '--with-class CLASS', 'Match hosts with a certain config management class') do |with_class|
    filters << class_filter(with_class)
  end

  parser.on('-F', '--wf', '--with-fact fact=val', 'Match hosts with a certain fact') do |with_fact|
    filters << fact_filter(with_fact)
  end


end

formatter = oparser.formatter

client = PuppetDB::Client.new

response = client.request('', "facts[certname, name, value] { #{filters.map { |f| "(#{f})" }.join(' and ')} }")

resources = response.data

nodes = Hash.new { |hash, value| hash[value] = {} }

resources.each do |fact|
  nodes[fact['certname']][fact['name']] = fact['value']
end

nodes.each do |sender, facts|
  formatter.nodes << Inventory::Node.new({
                                           sender: sender,
                                           data: {
                                             facts: facts,
                                           },
                                         })
end

puts formatter.to_s
